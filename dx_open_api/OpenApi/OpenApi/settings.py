"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 1.11.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import sys
from pathlib import Path
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
import pymysql
pymysql.install_as_MySQLdb()
import redis,platform
system = platform.system()
sys.path.insert(0, str(Path(BASE_DIR, 'apps')))

if "Linux" in system or "Windows Server" in system:
    #新的
    redis_host="192.168.1.203"
    mysql_host="192.168.1.203"
    mysql_port = 3306
    mysql_password = "Dly20160607"
    redis_port = 6379
    redis_password = "Dly20160607"
    print("当前数据库环境为服务器环境!")
else:
    # 新的
    redis_host="192.168.1.203"
    mysql_host="127.0.0.1"
    mysql_port = 3306
    mysql_password = "456110"
    redis_port = 6379
    redis_password = "Dly20160607"
    print("当前数据库环境为本地环境!")


DEBUG = True

# apps下的所有应用
sys.path.insert(0, str(Path(BASE_DIR, 'apps')))
pool97 = redis.ConnectionPool(host=redis_host, port=redis_port,db=97,password=redis_password)
rcon97 = redis.Redis(connection_pool=pool97)



pool = redis.ConnectionPool(host=redis_host, port=redis_port,db=0,password=redis_password)
rcon = redis.Redis(connection_pool=pool)
pool2 = redis.ConnectionPool(host=redis_host, port=redis_port,db=2,password=redis_password)
rcon2 = redis.Redis(connection_pool=pool2)
pool10 = redis.ConnectionPool(host=redis_host, port=redis_port,db=10,password=redis_password)
rcon10 = redis.Redis(connection_pool=pool10)
pool6 = redis.ConnectionPool(host=redis_host, port=redis_port,db=6,password=redis_password)
rcon6 = redis.Redis(connection_pool=pool6)
pool7 = redis.ConnectionPool(host=redis_host, port=redis_port,db=7,password=redis_password)
rcon7 = redis.Redis(connection_pool=pool7)
pool25 = redis.ConnectionPool(host=redis_host, port=redis_port,db=25,password=redis_password)
rcon25 = redis.Redis(connection_pool=pool25)
pool45 = redis.ConnectionPool(host=redis_host, port=redis_port,db=45,password=redis_password)
rcon45 = redis.Redis(connection_pool=pool45)
pool80 = redis.ConnectionPool(host=redis_host, port=redis_port,db=80,password=redis_password)
rcon80 = redis.Redis(connection_pool=pool80)
pool81 = redis.ConnectionPool(host=redis_host, port=redis_port,db=81,password=redis_password)
rcon81 = redis.Redis(connection_pool=pool81)
pool82 = redis.ConnectionPool(host=redis_host, port=redis_port,db=82,password=redis_password)
rcon82 = redis.Redis(connection_pool=pool82)
pool85 = redis.ConnectionPool(host=redis_host, port=redis_port,db=85,password=redis_password)
rcon85 = redis.Redis(connection_pool=pool85)
pool90 = redis.ConnectionPool(host=redis_host, port=redis_port,db=90,password=redis_password)
rcon90 = redis.Redis(connection_pool=pool90)
pool91 = redis.ConnectionPool(host=redis_host, port=redis_port,db=91,password=redis_password)
rcon91 = redis.Redis(connection_pool=pool91)
pool30 = redis.ConnectionPool(host=redis_host, port=redis_port,db=30,password=redis_password)
rcon30 = redis.Redis(connection_pool=pool30)
pool55 = redis.ConnectionPool(host=redis_host, port=redis_port,db=55,password=redis_password)
rcon55 = redis.Redis(connection_pool=pool55)
pool66 = redis.ConnectionPool(host=redis_host, port=redis_port,db=66,password=redis_password)
rcon66 = redis.Redis(connection_pool=pool66)
pool98 = redis.ConnectionPool(host=redis_host, port=redis_port,db=98,password=redis_password)
rcon98 = redis.Redis(connection_pool=pool98)
pool99 = redis.ConnectionPool(host=redis_host, port=redis_port,db=99,password=redis_password)
rcon99 = redis.Redis(connection_pool=pool99)
pool100 = redis.ConnectionPool(host=redis_host, port=redis_port,db=100,password=redis_password)
rcon100 = redis.Redis(connection_pool=pool100)
pool93 = redis.ConnectionPool(host=redis_host, port=redis_port,db=93,password=redis_password)
rcon93 = redis.Redis(connection_pool=pool93)

SECRET_KEY = 'n8e-!s(t4$n!l_j$o!9ey7es@25+=o-()38viz$pb(!djhxe2_'
# import dwebsocket
# DJANGO_SETTINGS_MODULE=True
MIDDLEWARE_CLASSES=['dwebsocket.middleware.WebSocketMiddleware']
WEBSOCKET_ACCEPT_ALL=True  # 可以允许每一个单独的视图实用websockets
# SECURITY WARNING: don't run with debug turned on in production!

ALLOWED_HOSTS = ['*']
DESKTOP_VERSION=['1.1.8311',"01.10.4"]
# Application definition
# 在应用中注册 channels
# Channels

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'channels',
    'rest_framework',
    'drf_yasg',
    'rest_framework.authtoken',
    'django_apscheduler',
    'corsheaders',
    'member',
    'match',
    "audit_log",
    "api_manage"

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'gerapy.server.core.middlewares.TransformMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'api_manage.middlewares.ZhuanFaMiddleware',
]

SESSION_ENGINE = 'django.contrib.sessions.backends.db' # 引擎（默认）
SESSION_COOKIE_NAME = "sports-storm"
SESSION_SAVE_EVERY_REQUEST = True
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}
# import datetime
SIMPLE_JWT = {
    "JWT_AUTH_HEADER_PREFIX":"JWT"
}
ROOT_URLCONF = 'OpenApi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'OpenApi.wsgi.application'
# ASGI_APPLICATION = 'OpenApi.asgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DB_SUBDIR = 'dbs'
DB_DIR = os.path.join(os.getcwd(), DB_SUBDIR)

# Create DB dir if it does not exist
os.path.exists(DB_DIR) or os.makedirs(DB_DIR)

# DB_PATH = os.path.join(DB_DIR, 'db.sqlite3')

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': DB_PATH,
#     }
# }
DATABASES_OPTIONS = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'open_api',
        'USER': 'root',
        'PASSWORD': mysql_password,  # qwe123!@#
        'HOST': mysql_host,
        'PORT': mysql_port,
        'TIME_ZONE': 'Asia/Shanghai',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset':'utf8mb4'
        }
    }
}
DATABASES = {
    'default': DATABASES_OPTIONS['default']
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

# TIME_ZONE = 'Asia/Shanghai'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True
USE_TZ = True
# DJANGO_CELERY_BEAT_TZ_AWARE = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = 'static/'

#跨域配置
# EVENTSTREAM_ALLOW_ORIGIN=["*"]
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = ()
CORS_URLS_REGEX = '^.*$'

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)

CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'plantcode',
    'mac',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'token',
    'code',
    'x-requested-with',
)

CORS_ALLOW_ORIGIN = '*'
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/
X_FRAME_OPTIONS = 'SAMEORIGIN'

# STATICFILES_DIRS = (
#     os.path.join(BASE_DIR, 'coreapp/templates/static/'),
# )

